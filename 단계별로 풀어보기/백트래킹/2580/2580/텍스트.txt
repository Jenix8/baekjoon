#include <iostream>
using namespace std;

bool completed(int s[9][9]) {
	for (int i = 0; i < 9; i++) {
		for (int j = 0; j < 9; j++) {
			if (s[i][j] == 0)
				return false;
		}
	}
	return true;
}

int decide(bool e[10]) {
	int cnt = 0, idx = 0;
	for (int i = 1; i <= 9; i++) {
		if (!e[i]) {
			cnt++;
			idx = i;
		}

		if (cnt > 1) return 0;
	}

	if (cnt == 0) {
		printf("Something was wrong\n");
		return 0;
	}
 
	return idx;
}

int fill_block(int s[9][9], int r, int c) {
	
	bool exist[10] = { false, };

	// row
	for (int i = 0; i < 9; i++) {
		if (s[r][i] != 0)
			exist[s[r][i]] = true;
	}

	// column
	for (int i = 0; i < 9; i++) {
		if (s[i][c] != 0)
			exist[s[i][c]] = true;
	}

	// square
	int squareRow = r / 3;
	int squareCol = c / 3;
	for (int i = squareRow * 3; i < squareRow * 3 + 3; i++) {
		for (int j = squareCol * 3; j < squareCol * 3 + 3; j++) {
			if (s[i][j] != 0)
				exist[s[i][j]] = true;
		}
	}

	return decide(exist);
}

int main() {
	int sudoku[9][9];
	int loop = 0;

	for (int i = 0; i < 9; i++) {
		for (int j = 0; j < 9; j++) {
			cin >> sudoku[i][j];
		}
	}

	do {
		for (int i = 0; i < 9; i++) {
			for (int j = 0; j < 9; j++) {
				if (sudoku[i][j] == 0)
					sudoku[i][j] = fill_block(sudoku, i, j);
			}
		}
		loop++;

		if (loop > 10000) break;
	} while (!completed(sudoku));

	cout << '\n';

	for (int i = 0; i < 9; i++) {
		for (int j = 0; j < 9; j++) {
			cout << sudoku[i][j] << ' ';
		}
		cout << '\n';
	}
}